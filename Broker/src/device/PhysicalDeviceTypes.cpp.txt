////////////////////////////////////////////////////////////////////////////////
/// @file           DeviceRegistrationGenerator.cpp.txt
///
/// @author         Michael Catanzaro <michael.catanzaro@mst.edu>
/// @author         Thomas Roth <tprfh7@mst.edu>
///
/// @project        FREEDM DGI
///
/// @description    Template used to generate code at compile time
///
/// @copyright
///     These source code files were created at Missouri University of Science
///     and Technology, and are intended for use in teaching or research. They
///     may be freely copied, modified, and redistributed as long as modified
///     versions are clearly marked as such and this notice is not removed.
///     Neither the authors nor Missouri S&T make any warranty, express or
///     implied, nor assume any legal responsibility for the accuracy,
///     completeness, or usefulness of these files or any information
///     distributed with these files. 
///     
///     Suggested modifications or questions about these files can be directed
///     to Dr. Bruce McMillin, Department of Computer Science, Missouri
///     University of Science and Technology, Rolla, MO 65409 <ff@mst.edu>.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// AUTOGENERATED FILE - DO NOT EDIT
////////////////////////////////////////////////////////////////////////////////

#include "device/CPhysicalDeviceManager.hpp"
#include "device/PhysicalDeviceTypes.hpp"
#include "device/CDeviceFactory.hpp"

namespace freedm {
namespace broker {
namespace device {

////////////////////////////////////////////////////////////////////////////////
/// Registers the physical devices known to this file with the device factory.
/// @pre None.
/// @post Calls CDeviceFactory::RegisterDeviceClass() for each known device.
/// @limitations The devices must have a header file in include/device/types/
/// to be registered through this function call.
////////////////////////////////////////////////////////////////////////////////
void RegisterPhysicalDevices()
{
    ##BREAK
}

////////////////////////////////////////////////////////////////////////////////
/// Retrieves devices of the specified type from the device manager.
/// @pre None.
/// @post Iterates through the device list to find matching devices.
/// @param type The device type to retrieve without the prefix "CDevice".
/// @return A vector of shared pointers to all devices of the specified type.
/// @limitations None.
////////////////////////////////////////////////////////////////////////////////
const std::vector<IDevice::Pointer> CPhysicalDeviceManager::GetDevicesOfType(
        std::string type)
{
    std::vector<IDevice::Pointer> result;
    
    for( iterator it = m_devices.begin(); it != m_devices.end(); it++ )
    {
        ##BREAK
    }
    return result;
}

} // namespace device
} // namespace broker
} // namespace freedm
